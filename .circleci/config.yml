variables:
  grv: &goreleaser-version "1.23.0"
  gv: &go-version "1.21.5"

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4
  cc: codecov/codecov@3.2
  go: circleci/go@1.9
  gor: hubci/goreleaser@2.4
  k8s: circleci/kubernetes@1.3

executors:
  linux:
    machine:
      image: ubuntu-2204:2023.10.1

workflows:
  main-wf:
    jobs:
      - build
      - tools
      - gor/release:
          name: snapshot-with-goreleaser
          version: *goreleaser-version
          go-version: *go-version
          image: linux
          dry-run: true
          pre-steps:
            - run: echo $GITHUB_TOKEN | docker login ghcr.io -u felicianotech --password-stdin
          post-steps:
            - when:
                condition:
                  or: 
                    - equal: [ "<< pipeline.git.branch >>", "trunk" ]
                    - equal: [ "<< pipeline.git.branch >>", "staging" ]
                steps:
                  - run: docker push --all-tags ghcr.io/revidian/ram-garage
            - persist_to_workspace:
                root: "."
                paths:
                  - "."
          context:
            - goreleaser-ctx
      - deploy:
          name: "deploy-staging"
          environment: "staging"
          requires:
            - snapshot-with-goreleaser
          filters:
            branches:
              only:
                - trunk
                - staging
          context:
            - k8s-ctx
  release-wf:
    jobs:
      - gor/release:
          name: release-with-goreleaser
          version: *goreleaser-version
          go-version: *go-version
          image: linux
          filters:
            branches:
              ignore: /.*/
            tags:
              # Simplified SemVer regex
              only: /^v\d+\.\d+\.\d+$/
          pre-steps:
            - run: echo $GITHUB_TOKEN | docker login ghcr.io -u felicianotech --password-stdin
          post-steps:
            - persist_to_workspace:
                root: "."
                paths:
                  - "."
          context:
            - goreleaser-ctx
      - deploy:
          name: "deploy-prod"
          environment: "production"
          requires:
            - release-with-goreleaser
          filters:
            branches:
              ignore: /.*/
            tags:
              # Simplified SemVer regex
              only: /^v\d+\.\d+\.\d+$/
          context:
            - k8s-ctx

jobs:
  build:
    docker:
      - image: cimg/go:1.21
      - image: cimg/postgres:16.0
        environment:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: AppleSucks
          POSTGRES_DB: app
    environment:
      TEST_RESULTS: /tmp/test-results
      DB_USER: app
      DB_PASS: AppleSucks
      DB_PORT: 5432
      DB_NAME: app
      PGUSER: app
      PGPASSWORD: AppleSucks
      PGHOST: 127.0.0.1
      PGPORT: 5432
      PGDATABASE: app
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-
      - run:
          name: "Install Dependencies"
          command: |
            curl -sSL "https://github.com/magefile/mage/releases/download/v1.15.0/mage_1.15.0_Linux-64bit.tar.gz" | sudo tar -xz --no-same-owner -C /usr/local/bin mage
            mage --version
            go install github.com/jackc/tern/v2@latest
            tern version

            sudo apt-get update && sudo apt-get install -y postgresql-common
            sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y -v 16
            sudo apt-get install -y postgresql-client-16
      - run:
          name: "Setup"
          command: |
            mkdir -p $TEST_RESULTS/go-test
            dockerize -wait tcp://localhost:5432 -timeout 1m
            tern migrate -m migrations
      - run:
          name: "Run Tests"
          command: |
            cd webapp && mage -v test
      - save_cache:
          key: go-mod-v1-
          paths:
            - "/go/pkg/mod"
      - store_test_results:
          path: webapp/unit-tests.xml
      - cc/upload
  browser-tests:
    docker:
      - image: cimg/python:3.9-browsers
      - image: cimg/postgres:16.0
        environment:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: AppleSucks
          POSTGRES_DB: app
    environment:
      TEST_RESULTS: /tmp/test-results
      DB_USER: app
      DB_PASS: AppleSucks
      DB_PORT: 5432
      DB_NAME: app
      PGUSER: app
      PGPASSWORD: AppleSucks
      PGHOST: 127.0.0.1
      PGPORT: 5432
      PGDATABASE: app
    steps:
      - attach_workspace:
          at: .
      - go/install:
          version: "1.21.5"
      - run:
          name: "Install Dependencies"
          command: |
            go install github.com/jackc/tern/v2@latest
            ~/go/bin/tern version

            pip install --upgrade pip
            pip install pytest pytest-html selenium
            pytest --version

            sudo apt-get update && sudo apt-get install -y postgresql-common
            sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y -v 16
            sudo apt-get install -y postgresql-client-16
      - run:
          name: "Setup"
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
            ~/go/bin/tern migrate -m migrations
      - run:
          name: "Start R// Garage"
          command: RAG_THEME_ROOT=/home/circleci/project/webapp/ ./dist/ra-garage_linux_amd64_v1/ra-garage
          background: true
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - browser-tools/install-firefox
      - browser-tools/install-geckodriver
      - run:
          name: "Run Tests"
          command: |
            cd selenium
            pytest --html=report.html
      - store_artifacts:
          path: selenium/report.html
  deploy:
    parameters:
      environment:
        description: "The server environment this should deploy to."
        type: enum
        enum:
          - "production"
          - "staging"
    executor: linux
    steps:
      - attach_workspace:
          at: .
      - k8s/install-kubeconfig
      - k8s/install-kubectl:
          kubectl-version: "v1.28.6"
      - run:
          name: "Deploy"
          command: |
            # It's possible we're trying to deploy too fast. Wait 10 seconds
            # before tryingt to deploy new images
            sleep 10

            if [ "<< parameters.environment >>" == "staging" ]; then
              echo "Deploying to staging."
              IMAGE=$(cat ./dist/artifacts.json | jq '.[].name | match("(^ghcr)(.*)(SNAPSHOT)(.*)$")' | jq -r .string)
              kubectl set image --namespace=ram deployment/garage-webapp-staging webapp=$IMAGE
            fi

            if [ "<< parameters.environment >>" == "production" ]; then
              echo "Deploying to production."
              kubectl set image --namespace=ram deployment/garage-webapp-prod webapp=ghcr.io/revidian/ram-garage:<< pipeline.git.tag >>
            fi


  tools:
    docker:
      - image: cimg/go:1.21
    steps:
      - checkout
      - run:
          name: "Install Tools"
          command: |
            git clone https://github.com/gojp/goreportcard.git
            cd goreportcard
            make install
            go install ./cmd/goreportcard-cli
      - run:
          name: "Run Go Report Card"
          command: |
            goreportcard-cli -v
  scc:
    docker:
      - image: cimg/go:1.21
    steps:
      - checkout
      - run:
          name: "Install scc"
          command: curl -sSL "https://github.com/boyter/scc/releases/download/v3.1.0/scc_3.1.0_Linux_x86_64.tar.gz" | sudo tar -xz -C /usr/local/bin scc
      - run:
          name: "Run scc"
          command: scc .
